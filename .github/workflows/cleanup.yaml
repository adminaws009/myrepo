name: Cleanup Yelb Deployment

on:
  schedule:
    - cron: '0 0 * * *'  # Runs every day at midnight UTC
  workflow_dispatch:  # Allows manual execution from GitHub Actions UI

env:
  CLUSTER_NAME: my-cluster
  GCP_REGION: us-central1

jobs:
  cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up GCP Authentication
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
          export_environment_variables: true  # Fixes missing credentials issue

      - name: Set GCP Project
        run: |
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
          
      - name: Verify GCP Authentication
        run: |
          gcloud auth list  # Verify service account access
          
      - name: Install gcloud SDK and GKE Auth Plugin
        run: |
          echo "Adding Google Cloud repository..."
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          echo "Downloading and adding Google Cloud public key..."
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
          echo "Updating package lists..."
          sudo apt-get update
          echo "Installing google-cloud-sdk and gke-gcloud-auth-plugin..."
          sudo apt-get install -y google-cloud-sdk google-cloud-sdk-gke-gcloud-auth-plugin
          echo "Configuring gke-gcloud-auth-plugin..."
          echo "USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV
          
      - name: Configure kubectl to use GKE
        run: |
          if gcloud container clusters describe ${{ env.CLUSTER_NAME }} --region=${{ env.GCP_REGION }} --project=${{ secrets.GCP_PROJECT_ID }} >/dev/null 2>&1; then
            gcloud container clusters get-credentials ${{ env.CLUSTER_NAME }} \
              --location=${{ env.GCP_REGION }} \
              --project=${{ secrets.GCP_PROJECT_ID }}
            kubectl get nodes
          else
            echo "Cluster does not exist. Skipping kubectl configuration."
          fi
          
      - name: Cleanup Yelb Kubernetes resources
        run: |
          if kubectl get namespace yelb >/dev/null 2>&1; then
            kubectl delete deployment,svc,pod -n yelb || true
            kubectl delete namespace yelb || true
            echo "Cleaned up Yelb resources from Kubernetes."
          else
            echo "Namespace 'yelb' does not exist. Skipping cleanup."
          fi
          
      - name: Delete GKE Autopilot Cluster (if exists)
        run: |
          CLUSTER_EXISTS=$(gcloud container clusters list \
            --filter="name=${{ env.CLUSTER_NAME }}" \
            --location=${{ env.GCP_REGION }} \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --format="value(name)")
          if [[ -n "$CLUSTER_EXISTS" ]]; then
            echo "Deleting the GKE cluster..."
            gcloud container clusters delete ${{ env.CLUSTER_NAME }} \
              --location=${{ env.GCP_REGION }} \
              --project=${{ secrets.GCP_PROJECT_ID }} --quiet
          else
            echo "Cluster does not exist. Skipping deletion."
          fi
