name: Yelb Docker Build, Push & Update Deployment

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

jobs:
  build_and_push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Set image tag
      run: echo "IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV

    - name: Build and Push yelb-appserver
      working-directory: yelb-appserver
      run: |
        docker build -t awsadmin009/yelb-images:yelb-appserver-${{ env.IMAGE_TAG }} .
        docker push awsadmin009/yelb-images:yelb-appserver-${{ env.IMAGE_TAG }}
    - name: Build and Push yelb-db
      working-directory: yelb-db
      run: |
        docker build -t awsadmin009/yelb-images:yelb-db-${{ env.IMAGE_TAG }} .
        docker push awsadmin009/yelb-images:yelb-db-${{ env.IMAGE_TAG }}
    - name: Build and Push yelb-ui
      working-directory: yelb-ui
      run: |
        docker build -t awsadmin009/yelb-images:yelb-ui-${{ env.IMAGE_TAG }} .
        docker push awsadmin009/yelb-images:yelb-ui-${{ env.IMAGE_TAG }}

    - name: Update `yelp-deploy.yaml` with latest image tags
      run: |
        sed -i "s|\(image:\s*awsadmin009/yelb-images:yelb-appserver-\).*|\1${{ env.IMAGE_TAG }}|" yelp-deploy.yaml
        sed -i "s|\(image:\s*awsadmin009/yelb-images:yelb-db-\).*|\1${{ env.IMAGE_TAG }}|" yelp-deploy.yaml
        sed -i "s|\(image:\s*awsadmin009/yelb-images:yelb-ui-\).*|\1${{ env.IMAGE_TAG }}|" yelp-deploy.yaml

    - name: Commit and push updated `yelp-deploy.yaml`
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
      run: |
        git config --global user.email "che80911@gmail.com"
        git config --global user.name "Cheson"
        git add yelp-deploy.yaml
        if git diff --cached --quiet; then
          echo "No changes to commit."
        else
          git commit -m "Update deployment file with latest image tags"
          git push https://x-access-token:${GH_TOKEN}@github.com/adminaws009/myrepo.git HEAD:main
        fi

    - name: Set up GCP Authentication
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    - name: Install gcloud SDK
      run: |
        curl -sSL https://sdk.cloud.google.com | bash
        source $HOME/google-cloud-sdk/path.bash.inc
        gcloud components install gke-gcloud-auth-plugin
        gcloud components update

    - name: Set up authentication plugin for kubectl
      run: |
        echo 'export USE_GKE_GCLOUD_AUTH_PLUGIN=True' >> ~/.bashrc
        source ~/.bashrc

    - name: Check if GKE Autopilot Cluster exists, if not create it
      run: |
        CLUSTER_EXISTS=$(gcloud container clusters list \
          --filter="name=my-cluster" \
          --zone ${{ secrets.GCP_ZONE }} \
          --project ${{ secrets.GCP_PROJECT_ID }} \
          --format="value(name)")

        if [[ -z "$CLUSTER_EXISTS" ]]; then
          echo "Cluster does not exist. Creating GKE Autopilot Cluster..."
          gcloud container clusters create my-cluster \
            --zone ${{ secrets.GCP_ZONE }} \
            --project ${{ secrets.GCP_PROJECT_ID }} \
            --autopilot
        else
          echo "Cluster already exists. Proceeding with existing cluster."
        fi

    - name: Configure kubectl to use GKE
      run: |
        gcloud container clusters get-credentials my-cluster --zone ${{ secrets.GCP_ZONE }} --project ${{ secrets.GCP_PROJECT_ID }}
        kubectl get nodes

    - name: Create Yelb Namespace
      run: |
        kubectl create namespace yelb || true

    - name: Apply Kubernetes Deployment
      run: |
        kubectl apply -f yelp-deploy.yaml -n yelb

    - name: Show LoadBalancer URL for yelb-ui
      run: |
        kubectl expose deployment yelb-ui --type=LoadBalancer --name=yelb-ui-lb -n yelb
        echo "Waiting for LoadBalancer to be provisioned..."
        kubectl get svc yelb-ui-lb -n yelb --watch -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' || echo "LoadBalancer not ready yet."
        kubectl get svc yelb-ui-lb -n yelb
        echo "LoadBalancer service details for yelb-ui:"
        kubectl describe svc yelb-ui-lb -n yelb

    - name: Ensure All Pods Are Deleted Before Cluster Deletion
      if: always()
      run: |
        kubectl delete pods --all --force --grace-period=0 --namespace yelb || true
        kubectl delete pods --all --force --grace-period=0 --namespace default || true

    - name: Check if GKE Cluster Exists Before Deleting
      run: |
        CLUSTER_EXISTS=$(gcloud container clusters describe my-cluster --zone ${{ secrets.GCP_ZONE }} --project ${{ secrets.GCP_PROJECT_ID }} --format="value(name)")
        if [[ -n "$CLUSTER_EXISTS" ]]; then
          echo "Cluster exists. Proceeding with deletion."
          gcloud container clusters delete my-cluster --zone ${{ secrets.GCP_ZONE }} --quiet
        else
          echo "Cluster not found. Skipping deletion."
        fi
