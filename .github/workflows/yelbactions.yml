name: Yelb Docker Build, Push & Update Deployment

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_and_push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set image tag
        run: echo "IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV

      - name: Build and Push yelb-appserver
        working-directory: yelb-appserver
        run: |
          docker build -t awsadmin009/yelb-images:yelb-appserver-${{ env.IMAGE_TAG }} .
          docker push awsadmin009/yelb-images:yelb-appserver-${{ env.IMAGE_TAG }}

      - name: Build and Push yelb-db
        working-directory: yelb-db
        run: |
          docker build -t awsadmin009/yelb-images:yelb-db-${{ env.IMAGE_TAG }} .
          docker push awsadmin009/yelb-images:yelb-db-${{ env.IMAGE_TAG }}

      - name: Build and Push yelb-ui
        working-directory: yelb-ui
        run: |
          docker build -t awsadmin009/yelb-images:yelb-ui-${{ env.IMAGE_TAG }} .
          docker push awsadmin009/yelb-images:yelb-ui-${{ env.IMAGE_TAG }}

      - name: Update `yelp-deploy.yaml` with latest image tags
        run: |
          sed -i "s|\(image:\s*awsadmin009/yelb-images:yelb-appserver-\).*|\1${{ env.IMAGE_TAG }}|" yelp-deploy.yaml
          sed -i "s|\(image:\s*awsadmin009/yelb-images:yelb-db-\).*|\1${{ env.IMAGE_TAG }}|" yelp-deploy.yaml
          sed -i "s|\(image:\s*awsadmin009/yelb-images:yelb-ui-\).*|\1${{ env.IMAGE_TAG }}|" yelp-deploy.yaml

      - name: Commit and push updated `yelp-deploy.yaml`
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git config --global user.email "che80911@gmail.com"
          git config --global user.name "Cheson"
          git add yelp-deploy.yaml
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Update deployment file with latest image tags"
            git push https://x-access-token:${GH_TOKEN}@github.com/adminaws009/myrepo.git HEAD:main
          fi

      - name: Set up GCP Authentication
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Install gcloud CLI and GKE Auth Plugin
        run: |
          sudo apt-get update
          sudo apt-get install -y google-cloud-cli google-cloud-cli-gke-gcloud-auth-plugin
          echo "export USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $HOME/.bashrc
          source $HOME/.bashrc

      - name: Check if GKE Cluster Exists
        id: check-cluster
        run: |
          if gcloud container clusters describe my-cluster --zone ${{ secrets.GCP_ZONE }} --project ${{ secrets.GCP_PROJECT_ID }} >/dev/null 2>&1; then
            echo "CLUSTER_EXISTS=true" >> $GITHUB_ENV
          else
            echo "CLUSTER_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Create GKE Cluster (If Not Exists)
        if: env.CLUSTER_EXISTS == 'false'
        run: |
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
          gcloud container clusters create my-cluster --zone ${{ secrets.GCP_ZONE }} --num-nodes=1

      - name: Configure kubectl to use GKE
        run: |
          gcloud container clusters get-credentials my-cluster --zone ${{ secrets.GCP_ZONE }} --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Create Yelb Namespace
        run: |
          kubectl create namespace yelb || true

      - name: Apply Kubernetes Deployment
        run: |
          kubectl apply -f yelp-deploy.yaml -n yelb

      - name: Show LoadBalancer URL for yelb-ui
        run: |
          kubectl expose deployment yelb-ui --type=LoadBalancer --name=yelb-ui-lb -n yelb
          echo "Waiting for LoadBalancer to be provisioned..."
          kubectl get svc yelb-ui-lb -n yelb --watch -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' || echo "LoadBalancer not ready yet."
          kubectl get svc yelb-ui-lb -n yelb
          echo "LoadBalancer service details for yelb-ui:"
          kubectl describe svc yelb-ui-lb -n yelb

      - name: Ensure All Pods Are Deleted Before Cluster Deletion
        if: always()
        run: |
          kubectl delete pods --all --force --grace-period=0 --namespace yelb || true
          kubectl delete pods --all --force --grace-period=0 --namespace default || true

      - name: Delete GKE Cluster (If Exists)
        if: env.CLUSTER_EXISTS == 'true'
        run: |
          gcloud container clusters delete my-cluster --zone ${{ secrets.GCP_ZONE }} --quiet
